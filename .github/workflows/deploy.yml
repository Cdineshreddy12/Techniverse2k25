name: Deploy to EC2

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Debug SSH Key Format
      run: |
        echo "Checking if SSH key secret exists..."
        if [ -n "${{ secrets.EC2_SSH_KEY }}" ]; then
          echo "SSH key is set in secrets"
          echo "First line of SSH key:"
          echo "${{ secrets.EC2_SSH_KEY }}" | head -n 1
          echo "Number of lines in SSH key:"
          echo "${{ secrets.EC2_SSH_KEY }}" | wc -l
        else
          echo "SSH key is not set in secrets!"
        fi

    - name: Debug EC2 Connection
      run: |
        echo "Testing connection to EC2 host..."
        echo "EC2 Host: ${{ secrets.EC2_HOST }}"
        nc -zv ${{ secrets.EC2_HOST }} 22 || echo "Cannot connect to port 22"
        echo "Attempting basic SSH connection..."
        echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        ssh-keygen -l -f private_key.pem || echo "Invalid key format"
        ssh -o StrictHostKeyChecking=no -i private_key.pem -v ec2-user@${{ secrets.EC2_HOST }} "echo 'SSH connection test'" || echo "SSH connection failed"

    - name: Debug AWS Credentials and Environment Variables
      run: |
        # Check if the AWS credentials are set in the environment
        echo "AWS Access Key ID: ${AWS_ACCESS_KEY_ID}"
        echo "AWS Secret Access Key: ${AWS_SECRET_ACCESS_KEY}"
        echo "AWS Region: ${AWS_REGION}"
        
        # List AWS configuration
        aws configure list
        
        # Try getting AWS identity, and capture errors if any
        aws sts get-caller-identity || echo "Failed to get identity, check AWS credentials and region."
        
        # Additional debug: Check AWS CLI version
        aws --version
        
        # Check the AWS configuration for errors
        aws configure get aws_access_key_id || echo "AWS Access Key ID not configured"
        aws configure get aws_secret_access_key || echo "AWS Secret Access Key not configured"
        aws configure get region || echo "AWS Region not configured"

        # Debugging if environment variables are set correctly
        echo "Checking environment variables for the Backend .env file:"
        echo "MONGODB_URI: ${MONGODB_URI}"
        echo "JWT_SECRET: ${JWT_SECRET}"
        echo "RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID}"
        echo "CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}"
        echo "KINDE_CLIENT_ID: ${KINDE_CLIENT_ID}"

      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        RAZORPAY_KEY_ID: ${{ secrets.RAZORPAY_KEY_ID }}
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
        KINDE_CLIENT_ID: ${{ secrets.KINDE_CLIENT_ID }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Verify AWS Configuration
      run: |
        aws sts get-caller-identity
        aws ec2 describe-instances --region us-east-1 || echo "Failed to describe instances"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        debug: true
        script: |
          # Debug connection
          whoami
          pwd
          echo "Current directory contents:"
          ls -la

          # Install Docker Compose if needed
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          echo "Navigating to project directory..."
          cd /home/ec2-user/Techniverse2k25 || exit 1
          
          echo "Pulling latest changes..."
          git pull origin main || exit 1
          
          # Create Backend .env
          echo "PORT=4000" > Backend/.env
          echo "NODE_ENV=production" >> Backend/.env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> Backend/.env
          echo "CORS_ORIGIN=http://${{ secrets.EC2_HOST }}" >> Backend/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> Backend/.env
          echo "JWT_EXPIRE=7d" >> Backend/.env
          echo "RAZORPAY_KEY_ID=${{ secrets.RAZORPAY_KEY_ID }}" >> Backend/.env
          echo "RAZORPAY_KEY_SECRET=${{ secrets.RAZORPAY_KEY_SECRET }}" >> Backend/.env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> Backend/.env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> Backend/.env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> Backend/.env
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> Backend/.env
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> Backend/.env
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> Backend/.env
          echo "KINDE_CLIENT_ID=${{ secrets.KINDE_CLIENT_ID }}" >> Backend/.env
          echo "KINDE_CLIENT_SECRET=${{ secrets.KINDE_CLIENT_SECRET }}" >> Backend/.env
          echo "KINDE_ISSUER_URL=${{ secrets.KINDE_ISSUER_URL }}" >> Backend/.env
          echo "KINDE_REDIRECT_URL=http://${{ secrets.EC2_HOST }}:4000/api/auth/kinde_callback" >> Backend/.env
          echo "KINDE_POST_LOGOUT_URL=http://${{ secrets.EC2_HOST }}:4000" >> Backend/.env
          echo "PHONEPE_MERCHANT_ID=${{ secrets.PHONEPE_MERCHANT_ID }}" >> Backend/.env
          echo "PHONEPE_SALT_KEY=${{ secrets.PHONEPE_SALT_KEY }}" >> Backend/.env
          echo "PHONEPE_SALT_INDEX=${{ secrets.PHONEPE_SALT_INDEX }}" >> Backend/.env
          echo "FRONTEND_URL=http://${{ secrets.EC2_HOST }}:5173" >> Backend/.env
          echo "BACKEND_URL=http://${{ secrets.EC2_HOST }}:4000" >> Backend/.env

          # Create Frontend .env
          echo "VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" > my-react-app/.env
          echo "VITE_APP_KINDE_CLIENT_ID=${{ secrets.VITE_APP_KINDE_CLIENT_ID }}" >> my-react-app/.env
          echo "VITE_APP_KINDE_ISSUER_URL=${{ secrets.VITE_APP_KINDE_ISSUER_URL }}" >> my-react-app/.env
          echo "VITE_APP_KINDE_REDIRECT_URL=http://${{ secrets.EC2_HOST }}/profile" >> my-react-app/.env
          echo "VITE_APP_KINDE_POST_LOGOUT_URL=http://${{ secrets.EC2_HOST }}" >> my-react-app/.env
          echo "VITE_APP_BACKEND_URL=http://${{ secrets.EC2_HOST }}:4000" >> my-react-app/.env

          echo "Starting deployment..."
          docker-compose -f docker-compose.prod.yml down || echo "Failed to stop containers"
          docker-compose -f docker-compose.prod.yml build --no-cache || exit 1
          docker-compose -f docker-compose.prod.yml up -d || exit 1
          
          echo "Checking container status.."
          docker ps
          
          echo "Checking logs..."
          docker-compose -f docker-compose.prod.yml logs --tail=50

    - name: Deployment Status
      run: |
        echo "Deployment completed"
        curl -I http://${{ secrets.EC2_HOST }}:5173 || echo "Frontend not responding"
        curl -I http://${{ secrets.EC2_HOST }}:4000 || echo "Backend not responding"