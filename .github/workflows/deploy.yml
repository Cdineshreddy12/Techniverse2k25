name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check Disk Space Before
      run: |
        echo "Initial disk space:"
        df -h
        echo "Docker space usage:"
        docker system df

    - name: Debug SSH Key Format
      run: |
        echo "Checking if SSH key secret exists..."
        if [ -n "${{ secrets.EC2_SSH_KEY }}" ]; then
          echo "SSH key is set in secrets"
          echo "First line of SSH key:"
          echo "${{ secrets.EC2_SSH_KEY }}" | head -n 1
          echo "Number of lines in SSH key:"
          echo "${{ secrets.EC2_SSH_KEY }}" | wc -l
        else
          echo "SSH key is not set in secrets!"
          exit 1
        fi

    - name: Debug EC2 Connection
      run: |
        echo "Testing connection to EC2 host..."
        echo "EC2 Host: ${{ secrets.EC2_HOST }}"
        nc -zv ${{ secrets.EC2_HOST }} 22 || echo "Cannot connect to port 22"
        echo "Attempting basic SSH connection..."
        echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        ssh-keygen -l -f private_key.pem || echo "Invalid key format"
        ssh -o StrictHostKeyChecking=no -i private_key.pem -v ec2-user@${{ secrets.EC2_HOST }} "echo 'SSH connection test'" || echo "SSH connection failed"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Verify AWS Configuration
      run: |
        aws sts get-caller-identity
        aws ec2 describe-instances --region us-east-1 || echo "Failed to describe instances"

    - name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check Disk Space Before
      run: |
        echo "Initial disk space:"
        df -h
        echo "Docker space usage:"
        docker system df

    - name: Debug SSH Key Format
      run: |
        echo "Checking if SSH key secret exists..."
        if [ -n "${{ secrets.EC2_SSH_KEY }}" ]; then
          echo "SSH key is set in secrets"
          echo "First line of SSH key:"
          echo "${{ secrets.EC2_SSH_KEY }}" | head -n 1
          echo "Number of lines in SSH key:"
          echo "${{ secrets.EC2_SSH_KEY }}" | wc -l
        else
          echo "SSH key is not set in secrets!"
          exit 1
        fi

    - name: Debug EC2 Connection
      run: |
        echo "Testing connection to EC2 host..."
        echo "EC2 Host: ${{ secrets.EC2_HOST }}"
        nc -zv ${{ secrets.EC2_HOST }} 22 || echo "Cannot connect to port 22"
        echo "Attempting basic SSH connection..."
        echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        ssh-keygen -l -f private_key.pem || echo "Invalid key format"
        ssh -o StrictHostKeyChecking=no -i private_key.pem -v ec2-user@${{ secrets.EC2_HOST }} "echo 'SSH connection test'" || echo "SSH connection failed"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Verify AWS Configuration
      run: |
        aws sts get-caller-identity
        aws ec2 describe-instances --region us-east-1 || echo "Failed to describe instances"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        debug: true
        script: |
          # [Your existing deployment script here]
          # Aggressive cleanup and deployment steps...

    - name: Setup Cleanup Cron
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Create cleanup script
          cat > ~/docker-cleanup.sh << 'EOL'
          #!/bin/bash
          docker system prune -af --volumes
          docker builder prune -af
          docker volume prune -f
          docker network prune -f
          EOL
          
          chmod +x ~/docker-cleanup.sh
          
          # Add to crontab (runs daily at midnight)
          (crontab -l 2>/dev/null; echo "0 0 * * * ~/docker-cleanup.sh") | crontab -

    - name: Check Final Disk Space
      if: always()
      run: |
        echo "Final disk space:"
        df -h
        echo "Docker space usage:"
        docker system df

    - name: Verify Deployment
      run: |
        # Wait for services to be fully up
        sleep 30
        
        # Check frontend
        echo "Checking frontend..."
        curl -I http://${{ secrets.EC2_HOST }}:5173 || echo "Frontend not responding"
        
        # Check backend
        echo "Checking backend..."
        curl -I http://${{ secrets.EC2_HOST }}:4000 || echo "Backend not responding"
        
        # Final status
        echo "Deployment verification completed"